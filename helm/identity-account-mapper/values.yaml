deployment:
  apiVersion: "apps/v1"

ingress:
  apiversion: networking.k8s.io/v1

service:
  apiversion: "v1"

secret:
  apiversion: "v1"

configmap:
  apiversion: "v1"

zeebe:
  broker:
    contactpoint: "zeebe-zeebe-gateway:26500"

zeebe-cluster-helm:
  global:
    zeebe: "zeebe-zeebe"
    elasticsearch:
      host: "ph-ee-elasticsearch"
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9600'
    prometheus.io/path: '/metrics'

  image:
    repository: camunda/zeebe
    tag: 1.1.0

  clusterSize: "1"
  partitionCount: "1"
  replicationFactor: "1"
  cpuThreadCount: "2"
  ioThreadCount: "2"
  pvcSize: "10Gi"
  pvcAccessModes: [ "ReadWriteOnce" ]

  resources:
    requests:
      cpu: 100m

  env:
    #    - name: ZEEBE_BROKER_BACKPRESSURE_ENABLED
    #      value: "false"
    - name: ZEEBE_BROKER_EXECUTION_METRICS_EXPORTER_ENABLED
      value: "true"
    - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME
      value: "hu.dpc.rt.kafkastreamer.exporter.NoOpExporter"
    - name: ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_JARPATH
      value: "/exporters/ph-ee-kafka-exporter.jar"
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_JARPATH
      value: "/exporters/ph-ee-kafka-exporter.jar"
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_CLASSNAME
      value: "hu.dpc.rt.kafkastreamer.exporter.KafkaExporter"
    - name: ZEEBE_BROKER_BACKPRESSURE_VEGAS_INITIALLIMIT
      value: "1000"
    - name: ZEEBE_BROKER_BACKPRESSURE_VEGAS_ALPHA
      value: "2"
    - name: ZEEBE_BROKER_BACKPRESSURE_VEGAS_BETA
      value: "8"
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_EVENT
      value: 'true'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_VARIABLE
      value: 'true'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_PROCESSINSTANCE
      value: 'true'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_PROCESS
      value: 'true'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_INCIDENT
      value: 'true'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_DEPLOYMENT
      value: 'false'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_ERROR
      value: 'false'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_JOB
      value: 'false'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_VARIABLEDOCUMENT
      value: 'false'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_WORKFLOWINSTANCE
      value: 'false'
    - name: ZEEBE_BROKER_EXPORTERS_KAFKA_ARGS_INDEX_CREATETEMPLATE
      value: 'false'


  gateway:
    replicas: 1
    logLevel: warn
    env:
      - name: ZEEBE_GATEWAY_THREADS_MANAGEMENTTHREADS
        value: "4"
      - name: ZEEBE_GATEWAY_MONITORING_ENABLED
        value: "true"

  # zeebe's dependencies
  elasticsearch:
    enabled: false
    fullnameOverride: "zeebe-elasticsearch"
    clusterName: "zeebe-elasticsearch"

  kibana:
    enabled: false
    fullnameOverride: "zeebee-kibana"
    elasticsearchHosts: "http://zeebe-elasticsearch:9200/"

  prometheus:
    enabled: false

  extraInitContainers: |
    - name: init-ph-ee-kafka-exporter
      image: busybox:1.28
      command: ['/bin/sh', '-c']
      args: ['wget -O /exporters/ph-ee-kafka-exporter.jar "https://fynarfin.io/images/exporter-1.1.0-SNAPSHOT.jar"; ls -al /exporters/']
      volumeMounts:
      - name: exporters
        mountPath: /exporters/

# payment hub Operate, ES and Kibana
zeebe-operate-helm:
  enabled: false
  image:
    repository: camunda/operate
    tag: 1.1.0
  fullnameOverride: "zeebe-operate"
  global:
    zeebe: "zeebe-zeebe"
    elasticsearch:
      host: "zeebe-elasticsearch"
      clusterName: "zeebe-elasticsearch"

elasticsearch:
  enabled: true
  imageTag: 7.16.3
  replicas: 1
  protocol: http
  fullnameOverride: "ph-ee-elasticsearch"
  clusterName: "ph-ee-elasticsearch"
  minimumMasterNodes: 1
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: false
      xpack.security.transport.ssl.enabled: false
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.enabled: false
      xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/elasticsearch/config/certs
  extraEnvs:
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password


kibana:
  enabled: true
  imageTag: 7.16.3
  fullnameOverride: "ph-ee-kibana"
  elasticsearchHosts: "http://ph-ee-elasticsearch:9200/"
  protocol: http
  kibanaConfig:
    kibana.yml: |
      monitoring.enabled: false
      xpack.encryptedSavedObjects.encryptionKey: 5f4dcc3b5aa765d61d8327deb882cf99
      server.ssl:
        enabled: false
        key: /usr/share/kibana/config/certs/elastic-certificate.pem
        certificate: /usr/share/kibana/config/certs/elastic-certificate.pem
      xpack.security.encryptionKey: ${KIBANA_ENCRYPTION_KEY}
      elasticsearch.ssl:
        certificateAuthorities: /usr/share/kibana/config/certs/elastic-certificate.pem
        verificationMode: certificate
  secretMounts:
    - name: elastic-certificate-pem
      secretName: elastic-certificate-pem
      path: /usr/share/kibana/config/certs
  extraEnvs:
    - name: 'ELASTICSEARCH_USERNAME'
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: username
    - name: 'ELASTICSEARCH_PASSWORD'
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password
    - name: 'KIBANA_ENCRYPTION_KEY'
      valueFrom:
        secretKeyRef:
          name: kibana
          key: encryptionkey

operationsmysql:
  fullnameOverride: "operationsmysql"
  image:
    tag: "5.7"
    debug: false
  auth:
    database: "tenants"
    username: "mifos"
    password: "password"
    rootPassword: "4ET6ywqlGt"
  initdbScripts:
    setup.sql: |-
      CREATE DATABASE IF NOT EXISTS phdefault;
      CREATE DATABASE IF NOT EXISTS messagegateway;
      GRANT ALL ON *.* TO 'root'@'%';
      GRANT ALL PRIVILEGES ON messagegateway.* TO 'mifos';
      GRANT ALL PRIVILEGES ON phdefault.* TO 'mifos';

ph_ee_connector_mojaloop:
  enabled: false
  replicas: 1
  image: ""
  imageTag: "v1.1.0"
  imagePullPolicy: "Always"
  SPRING_PROFILES_ACTIVE: ""
  switch:
    quotes:
      host: ""
      service: ""
    als:
      host: ""
      service: ""
    transfers:
      host: ""
      service: ""
    transactions:
      host: ""
      service: ""
    oracle:
      host: ""
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for mojaloop pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for mojaloop container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: ""
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-connector-mojaloop-javaConfig: ""
  #   ph-ee-connector-mojaloop-java.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the mojaloop Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  # Enabling this will publicly expose your mojaloop instance.
  # Only enable this if you have security enabled on your cluster
  ingress:
    enabled: true
    path: "/"
    annotations: {}
    backend: {}
  deployment:
    annotations: {}
    affinity: {}
    nodeSelector: {}
    tolerations: []
    envFrom: []
    # - configMapRef:
    #     name: config-secret
    extraEnvs: ""
    # - User that the container will execute as.
    # Not necessary to run as root (0) as the mojaloop Deployment use cases do not need access to Kubernetes Node internals
    # - Typically not necessarily unless running within environments such as OpenShift.
    securityContext:
      runAsUser: 0
      privileged: false
    resources:
      limits:
        memory: "512M"
        cpu: "500m"
      requests:
        memory: "512M"
        cpu: "100m"
    # Allows you to add any config files in /usr/share/
    # such as ph-ee-connector-mojaloop-java.yml for deployment
    # ph-ee-connector-mojaloop-javaConfig: {}
    #   ph-ee-connector-mojaloop-java.yml: |

importer_es:
  enabled: true
  replicas: 1
  image: ""
  imageTag: "v1.4.0"
  imagePullPolicy: "Always"
  importer_elasticsearch_url: "http://ph-ee-elasticsearch:9200/"
  reporting:
    enabled: false
    fields:
      amount: false
      accountId: false
      ams: false
      clientCorrelationId: false
      currency: false
      customData: false
      confirmationReceived: false
      errorCode: false
      errorDescription: false
      errorInformation: false
      externalId: false
      initiator: false
      initiatorType: false
      isNotificationsFailureEnabled: false
      isNotificationsSuccessEnabled: false
      mpesaTransactionId: false
      mpesaTransactionStatusRetryCount: false
      originDate: false
      partyLookupFailed: false
      phoneNumber: false
      processDefinitionKey: false
      processInstanceKey: false
      scenario: false
      tenantId: false
      timer: false
      timestamp: false
      transactionFailed: false
      transactionId: false
      transferCreateFailed: false
      transferSettlementFailed: false
      transferResponseCREATE: false
  elasticsearch_sslverification: false
  elasticsearch_security_enabled: false
  logging:
    level:
      root: "INFO"
    pattern:
      console: "%d{dd-MM-yyyy HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n"
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 9191
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 3
    timeoutSeconds: 5
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true
  # Custom service account override that the pod will use
  serviceAccount: ""
  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}
  # How long to wait for Zeebe-ops pods to stop gracefully
  terminationGracePeriod: 30
  # Extra environment variables for Zeebe-ops container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs: ""
  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""
  # ph-ee-zeebe-opsConfig: ""
  #   ph-ee-zeebe-ops.yml: |
  # - User that the container will execute as.
  # Not necessary to run as root (0) as the Zeebe-ops Deployment use cases do not need access to Kubernetes Node internals
  # - Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    limits:
      memory: "512M"
      cpu: "500m"
    requests:
      memory: "512M"
      cpu: "100m"
  javaToolOptions: "-Xmx256M"
  deployment:
    annotations: {}


kafka:
  enabled: true
  replicas: 1
  image: "spotify/kafka"
  imagePullPolicy: "Always"
  advertised:
    host: "kafka"
    port: "9092"
  limits:
    memory: "512M"
    cpu: "500m"
  requests:
    memory: "512M"
    cpu: "100m"
  deployment:
    annotations:
      deployTime: "{{ .Values.deployTime }}"